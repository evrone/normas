{"version":3,"file":"normas.production.js","sources":["../../src/js/lib/jqueryAdditions.js","../../src/js/lib/helpers.js","../../src/js/mixins/dom.js","../../src/js/mixins/base.js","../../src/js/mixins/logging.js","../../src/js/index.js","../../src/js/mixins/events.js","../../src/js/mixins/mutations.js","../../src/js/mixins/navigation.js","../../src/js/mixins/elements.js","../../src/js/mixins/content.js"],"sourcesContent":["$.fn.each$ = function (handle) {\n  return this.each((index, element) => {\n    handle($(element), index);\n  });\n};\n\n$.fn.filter$ = function (handle) {\n  return this.filter((index, element) => handle($(element), index));\n};\n\n// [showOrHide[, duration[, callback]]]\n$.fn.slideToggleByState = function slideToggleByState(...a) {\n  if (this.length > 0) {\n    if (a.length > 0) {\n      if (a.shift()) {\n        this.slideDown(...a);\n      } else {\n        this.slideUp(...a);\n      }\n    } else {\n      this.slideToggle();\n    }\n  }\n  return this;\n};\n\n// http://css-tricks.com/snippets/jquery/mover-cursor-to-end-of-textarea/\n$.fn.focusToEnd = function focusToEnd() {\n  let $this = this.first();\n  if ($this.is('select, :checkbox, :radio')) {\n    $this.focus();\n  } else {\n    let val = $this.val();\n    $this.focus().val('').val(val);\n  }\n  return this;\n};\n\n$.fn.focusTo = function focusTo(caretPos) {\n  return this.each((index, element) => {\n    if (element.createTextRange) {\n      let range = element.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n    } else if (element.selectionStart) {\n      element.focus();\n      element.setSelectionRange(caretPos, caretPos);\n    } else {\n      element.focus();\n    }\n  });\n};\n\n/*\n ** Returns the caret (cursor) position of the specified text field.\n ** Return value range is 0-oField.value.length.\n */\n$.fn.caretPosition = function caretPosition() {\n  // Initialize\n  let iCaretPos = 0;\n  let oField = this[0];\n\n  // IE Support\n  if (document.selection) {\n    // Set focus on the element\n    oField.focus();\n    // To get cursor position, get empty selection range\n    let oSel = document.selection.createRange();\n    // Move selection start to 0 position\n    oSel.moveStart('character', -oField.value.length);\n    // The caret position is selection length\n    iCaretPos = oSel.text.length;\n  } else if (oField.selectionStart != null) {\n    iCaretPos = oField.selectionStart;\n  }\n\n  // Return results\n  return iCaretPos;\n};\n","// Sufficient for Normas implementation of functions like from lodash\n\nexport function isPlainObject(value) {\n  if (value == null || typeof value !== 'object') {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n  const constructor = Object.prototype.hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof constructor === 'function' && constructor instanceof constructor;\n}\n\nexport const isArray = Array.isArray;\n\nexport function isFunction(v) {\n  return typeof v === 'function';\n}\n\nexport function isString(v) {\n  return typeof v === 'string';\n}\n\nexport function compact(array) {\n  return filter(array, v => v);\n}\n\nexport function debounce(func, wait) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, wait);\n  }\n}\n\nexport function groupBy(array, key) {\n  return reduceBy(array, key, (grouped, groupKey, item) => {\n    if (grouped[groupKey]) {\n      grouped[groupKey].push(item);\n    } else {\n      grouped[groupKey] = [item];\n    }\n  });\n}\n\nexport function countBy(array, key) {\n  return reduceBy(array, key, (grouped, groupKey) => {\n    if (grouped[groupKey]) {\n      grouped[groupKey]++;\n    } else {\n      grouped[groupKey] = 1;\n    }\n  });\n}\n\nexport function groupByInArray(array, key) {\n  return reduceBy(array, key, (grouped, groupKey, item) => {\n    const group = find(grouped, ([k]) => k === groupKey);\n    if (group) {\n      group[1].push(item);\n    } else {\n      grouped.push([groupKey, [item]]);\n    }\n  }, []);\n}\n\nexport function flatten(array, deep = false) {\n  return array.reduce((flat, value) => {\n    if (isArray(value)) {\n      flat.push(...(deep ? flatten(value, true) : value));\n    } else {\n      flat.push(value);\n    }\n    return flat;\n  }, []);\n}\n\nexport function intersection(a, b) {\n  if (!isArray(b)) {\n    b = [b];\n  }\n  return (isArray(a) ? a : [a]).reduce((result, value) => {\n    if (includes(b, value)) {\n      result.push(value);\n    }\n    return result;\n  }, []);\n}\n\nexport function deepMerge(destination, source) {\n  return Object.keys(source).reduce((result, key) => {\n    if (source[key]) {\n      if (isPlainObject(destination[key]) && isPlainObject(source[key])) {\n        result[key] = deepMerge(destination[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n      return result;\n    }\n  }, Object.assign({}, destination));\n}\n\nexport function filter(collection, conditions) {\n  return filterBase('filter', collection, conditions);\n}\n\nexport function find(collection, conditions) {\n  return filterBase('find', collection, conditions);\n}\n\nexport function findIndex(collection, conditions) {\n  return filterBase('find', collection, conditions);\n}\n\nexport function map(collection, iteratee) {\n  return Array.prototype.map.call(collection, iteratee);\n}\n\nexport function each(collection, iteratee) {\n  return Array.prototype.forEach.call(collection, iteratee);\n}\n\nexport function mapValues(object, iteratee) {\n  return Object.keys(object).reduce((result, key) => {\n    result[key] = iteratee(object[key], key);\n    return result;\n  }, {});\n}\n\nexport function without(collection, ...values) {\n  return difference(collection, values);\n}\n\nexport function difference(arrayA, arrayB) {\n  return filter(arrayA, a => !includes(arrayB, a));\n}\n\nexport function includes(collection, searchElement) {\n  return Array.prototype.indexOf.call(collection, searchElement) !== -1;\n}\n\n// private\n\nfunction reduceBy(array, key, reducer, initial = {}) {\n  return Array.prototype.reduce.call(array, (grouped, item) => {\n    const groupKey = isFunction(key) ? key(item) : item[key];\n    reducer(grouped, groupKey, item);\n    return grouped;\n  }, initial);\n}\n\nfunction filterBase(baseName, collection, conditions) {\n  return Array.prototype[baseName].call(collection, makeConditionsMatch(conditions));\n}\n\nfunction makeConditionsMatch(conditions) {\n  if (isFunction(conditions)) {\n    return conditions;\n  } else {\n    const conditionsKeys = Object.keys(conditions);\n    return item => filterMatch(item, conditions, conditionsKeys);\n  }\n}\n\nfunction filterMatch(item, conditions, conditionsKeys) {\n  return conditionsKeys.find(key => conditions[key] !== item[key]) === undefined;\n}\n","import { isArray, isPlainObject, mapValues, each } from '../lib/helpers';\n\nexport default {\n  memoryData(element, key, ...value) {\n    if (value.length > 0) {\n      this.elementsApply(element, el => { el[key] = value[0]; });\n    } else {\n      return element[key];\n    }\n  },\n\n  removeMemoryData(element, key) {\n    delete element[key];\n  },\n\n  data(element, key, ...value) {\n    if (value.length > 0) {\n      const stringifiedValue = this.dataStringify(value[0]);\n      this.elementsApply(element, el => { el.dataset[key] = stringifiedValue; });\n    } else {\n      return key\n        ?\n        this.dataParse(element.dataset[key])\n        :\n        mapValues(element.dataset, dataValue => this.dataParse(dataValue));\n    }\n  },\n\n  removeData(element, key) {\n    delete element.dataset[key];\n  },\n\n  dataStringify(data) {\n    return isArray(data) || isPlainObject(data)\n      ?\n      JSON.stringify(data)\n      :\n      data;\n  },\n\n  dataParse(dataValue) {\n    try {\n      return JSON.parse(dataValue);\n    } catch (e) {\n      this.lastDataParseError = e;\n      return dataValue;\n    }\n  },\n\n  elementsApply(element, iteratee) {\n    if (this.isElement(element)) {\n      iteratee(element);\n    } else {\n      each(element, iteratee);\n    }\n  },\n\n  isElement(element) {\n    return element instanceof Element;\n  },\n\n  contains(rootElement, element) {\n    return (rootElement === document ? document.body : rootElement).contains(element);\n  }\n};\n","import * as helpers from '../lib/helpers';\nimport dom from './dom';\n\nexport default class Base {\n  static version = '0.4.0-rc1';\n  static helpers = helpers;\n  static dom = dom;\n  helpers = helpers;\n  dom = dom;\n\n  constructor({ el = document, instanceName = 'NormasApp' }) {\n    this.instanceName = instanceName;\n    this.el = el;\n    this.$el = $(el);\n  }\n\n  $(...args) {\n    return this.$el.find(...args);\n  }\n\n  log(...args) {\n    // nop\n  }\n\n  error(...args) {\n    // nop\n  }\n\n  // protected\n\n  static readOptions(dest, source, defaults) {\n    Object.keys(defaults).forEach(key => {\n      dest[key] = source && (key in source) ? source[key] : defaults[key];\n    });\n  }\n}\n","export default Base => (class extends Base {\n  constructor(options) {\n    super(options);\n    this.constructor.readOptions(this, options, { debugMode: true });\n    this.logging = {};\n    this.constructor.readOptions(this.logging, options.logging, {\n      construct: true,\n      constructGrouping: true,\n      constructPrefix: 'üèóÔ∏è',\n      hideInstancesOf: [],\n    });\n    const [constructText, ...constructStyles] = this.constructor.logColor('construct', 'green');\n    this.log(this.constructor.groupingMethod(this.logging.constructGrouping), 'construct',\n      ...this.constructor.logBold(`${this.logging.constructPrefix} \"%REPLACE%\" ${constructText}`, this.instanceName),\n      ...constructStyles,\n      this);\n  }\n\n  static consoleMethods = ['log', 'group', 'groupEnd', 'groupCollapsed', 'info', 'table', 'warn'];\n\n  log(...args) {\n    if (!this.debugMode) return;\n    const method = this.helpers.includes(this.constructor.consoleMethods, args[0]) ? args.shift() : 'log';\n    if (this.helpers.intersection(Object.keys(this.logging), args[0]).length > 0 && !this.logging[args.shift()]) {\n      return;\n    }\n    this.constructor.log(method, ...this.filterLog(args));\n  }\n\n  error(...args) {\n    this.constructor.log('error', ...args);\n  }\n\n  // private\n\n  filterLog(args) {\n    return this.logging.hideInstancesOf.length === 0 ? args :\n      this.helpers.filter(args, a => !this.helpers.find(this.logging.hideInstancesOf, c => a instanceof c));\n  }\n\n  static groupingMethod(grouping) {\n    return (typeof grouping === 'string') ? grouping : (grouping ? 'group' : 'log');\n  }\n\n  static log(method, ...args) {\n    if (console && console[method]) {\n      console[method](...args); // eslint-disable-line no-console\n    }\n  }\n\n  static logPlur(message, count, omitOne = true) {\n    return message.replace('%COUNT%', omitOne && count === 1 ? '' : count).replace('%S%', count === 1 ? '' : 's');\n  }\n\n  static logCycle(moveName, enter, intensity = 2) {\n    return this.logColor(\n      `${moveName} ${(enter ? '>' : '<').repeat(intensity)}`,\n      enter ? 'green' : 'red',\n    );\n  }\n\n  static logColor(template, colorText, color) {\n    if (!color) {\n      color = colorText;\n      colorText = null;\n    }\n    return this.logStyle(template, colorText, { color });\n  }\n\n  static logBold(template, boldText) {\n    return this.logStyle(template, boldText, { 'font-weight': 'bold' });\n  }\n\n  static logStyle(template, stylingReplace, style) {\n    if (this.helpers.isPlainObject(stylingReplace)) {\n      style = stylingReplace;\n      stylingReplace = null;\n    }\n    if (!stylingReplace) {\n      stylingReplace = template;\n      template = null;\n    }\n    const stylePairs = Object.entries(style);\n    const beginStyle = stylePairs.map(p => p.join(': ')).join('; ');\n    const endStyle = stylePairs.map(([k]) => [k, 'inherit'].join(': ')).join('; ');\n    stylingReplace = `%c${stylingReplace}%c`;\n    if (template) {\n      stylingReplace = template.replace('%REPLACE%', stylingReplace);\n    }\n    return [stylingReplace, beginStyle, endStyle];\n  }\n\n  static contentName($content) {\n    const contentCounts = this.helpers.countBy($content, content => {\n      const classList = content.classList ? this.helpers.map(content.classList, className => className) : [];\n      return [content.tagName].concat(classList).join('.');\n    });\n    return Object.keys(contentCounts).map(name => {\n      const count = contentCounts[name];\n      return `${count > 1 ? count + ' ' : ''}${name}`;\n    }).join(' + ');\n  }\n\n  static readmeLink(point) {\n    return `Read https://github.com/evrone/normas#${point}`;\n  }\n});\n","/**\n * Normas\n *\n * @see {@link https://github.com/evrone/normas|Github}\n * @license MIT\n * @copyright Dmitry Karpunin <koderfunk@gmail.com>, 2017-2018\n */\n\nimport './lib/jqueryAdditions';\nimport NormasBase from './mixins/base';\nimport NormasLogging from './mixins/logging';\nimport normasEvents from './mixins/events';\nimport normasContent from './mixins/content';\nimport normasElements from './mixins/elements';\nimport normasNavigation from './mixins/navigation';\nimport normasMutations from './mixins/mutations';\n\nconst NormasSubBase = NORMAS_DEBUG ? NormasLogging(NormasBase) : NormasBase;\n\nconst NormasCore = normasEvents(NormasSubBase);\n\nconst Normas =\n  normasMutations(\n    normasNavigation(\n      normasElements(\n        normasContent(\n          NormasCore\n        )\n      )\n    )\n  );\n\nNormas.NormasCore = NormasCore;\n\nexport default Normas;\n","export default Base => (class extends Base {\n  constructor(options) {\n    super(options);\n    if (NORMAS_DEBUG) {\n      this.constructor.readOptions(this.logging, options.logging, {\n        events: true,\n        eventsDebounced: true,\n        eventsTable: false,\n      });\n      if (this.debugMode && this.logging.events && this.logging.eventsDebounced) {\n        this.eventsLogBuffer = [];\n        this.logEventsDebounced = this.helpers.debounce(this.logEventsDebounced.bind(this), 20);\n      }\n      this.log('info', ['construct', 'events'],\n        `üö¶ \"${this.instanceName}\" events mixin activated.`,\n        'logging.events =', this.logging.events,\n        'logging.eventsDebounced =', this.logging.eventsDebounced,\n        'logging.eventsTable =', this.logging.eventsTable);\n    }\n  }\n\n  trigger(eventName, ...args) {\n    this.$el.trigger(eventName, args);\n  }\n\n  listenEvents(...args) {\n    return this.listenEventsOnElement(this.$el, ...args);\n  }\n\n  listenEventsOnElement($element, ...args) {\n    const listeningArgs = this.constructor.listeningArguments(...args);\n    if (NORMAS_DEBUG && this.debugMode && this.logging.events) {\n      this.logEvents($element, listeningArgs);\n    }\n    listeningArgs.forEach(({ events, selector, handle }) => {\n      $element.on(events, selector, handle);\n    });\n    return listeningArgs;\n  }\n  \n  forgetEvents(listeningArgs) {\n    this.forgetEventsOnElement(this.$el, listeningArgs);\n  }\n\n  forgetEventsOnElement($element, listeningArgs) {\n    if (NORMAS_DEBUG) {\n      this.logEventsOutput($element, listeningArgs, false);\n    }\n    listeningArgs.forEach(({ events, selector, handle }) => {\n      $element.off(events, selector, handle);\n    });\n  }\n\n  // private\n\n  logEvents($element, listeningArgs) {\n    if (!NORMAS_DEBUG) {\n      return;\n    }\n    if (this.logging.eventsDebounced) {\n      const element = $element[0];\n      listeningArgs.forEach(args => { args.element = element; });\n      this.eventsLogBuffer = this.eventsLogBuffer.concat(listeningArgs);\n      this.logEventsDebounced();\n    } else {\n      this.logEventsOutput($element, listeningArgs, true);\n    }\n  }\n\n  logEventsDebounced() {\n    if (!NORMAS_DEBUG) {\n      return;\n    }\n    const grouped = this.helpers.groupByInArray(this.eventsLogBuffer, 'element');\n    grouped.forEach(([element, listeningArgs]) => {\n      this.logEventsOutput($(element), listeningArgs, true);\n    });\n    this.eventsLogBuffer = [];\n  }\n\n  logEventsOutput($element, listeningArgs, enter) {\n    if (!NORMAS_DEBUG || !this.logging.events) {\n      return;\n    };\n    const elementName = $element[0] === this.el ? this.instanceName : this.constructor.contentName($element);\n    const count = listeningArgs.length;\n    const plurEvents = this.constructor.logPlur('event%S%', count);\n    const [styledCount, ...countStyles] = count > 1 ? this.constructor.logBold(count) : [];\n    const [cycleName, ...cycleStyles] = this.constructor.logCycle(enter ? 'listen on' : 'forget from', enter);\n    const [styledElementName, ...elementStyles] = this.constructor.logBold(elementName);\n    this.log('events',\n      `üö¶ ${styledCount ? styledCount + ' ' : ''}${plurEvents} ${cycleName} \"${styledElementName}\"`,\n      ...countStyles, ...cycleStyles, ...elementStyles,\n      $element, ...(this.logging.eventsTable ? [] : [listeningArgs]));\n    if (!this.logging.eventsTable) return;\n    this.log('table', listeningArgs.map(({ selector, events }) => ({ selector, events })));\n  }\n\n  static listeningArguments(selector, eventRule, handle) {\n    if (this.helpers.isPlainObject(selector)) {\n      eventRule = selector;\n      selector = '';\n    }\n\n    if (this.helpers.isFunction(eventRule)) {\n      handle = eventRule;\n      eventRule = selector;\n      selector = '';\n    }\n\n    if (this.helpers.isPlainObject(eventRule)) {\n      return this.helpers.flatten(Object.keys(eventRule).map((key) => {\n        let value = eventRule[key];\n        return this.helpers.isPlainObject(value) ?\n          this.listeningArguments(selector ? `${selector} ${key}` : key, value)\n          :\n          this.listeningArguments(selector, key, value);\n      }));\n    }\n\n    if (!this.helpers.isFunction(handle)) {\n      if (NORMAS_DEBUG) {\n        console.error(`handle isn't function in listening declaration! (selector: '${selector}')`); // eslint-disable-line no-console\n      }\n      return [];\n    }\n    if (!eventRule) {\n      if (NORMAS_DEBUG) {\n        console.error(`eventRule not defined! (selector: '${selector}')`); // eslint-disable-line no-console\n      }\n      return [];\n    }\n\n    const selectors = eventRule.split(/\\s+/);\n    const eventName = selectors[0];\n    selectors[0] = selector;\n\n    if (!eventName) {\n      if (NORMAS_DEBUG) {\n        console.error(`bad eventName in listening declaration! (selector: '${selector}')`); // eslint-disable-line no-console\n      }\n      return [];\n    }\n\n    return [{\n      events: eventName.replace(/\\//g, ' '),\n      selector: selectors.join(' ').trim(),\n      handle: (event, ...args) => handle($(event.currentTarget), event, ...args),\n    }];\n  }\n});\n","// require navigation mixin\nexport default Base => (class extends Base {\n  constructor(options) {\n    super(options);\n    if (!this.enablings) this.enablings = {};\n    this.constructor.readOptions(this.enablings, options.enablings, { mutations: true });\n    if (NORMAS_DEBUG) {\n      this.log('info', 'construct',\n          ...this.constructor.logColor(`ü§ñ \"${this.instanceName}\" MutationObserver %REPLACE%.`,\n            this.enablings.mutations ? 'enabled' : 'disabled',\n            this.enablings.mutations ? 'green' : 'blue'));\n    }\n    if (this.enablings.mutations) {\n      if (MutationObserver) {\n        this.observeMutations();\n      } else if (NORMAS_DEBUG) {\n        this.log('warn', 'construct', `ü§ñ \"${this.instanceName}\" mutation observer NOT SUPPORTED!`,\n          this.constructor.readmeLink('-content-broadcasting'));\n      }\n    }\n  }\n\n  observeMutations() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n    this.mutationObserver = new MutationObserver(mutations => mutations.forEach(this.checkMutations));\n    this.mutationObserver.observe(this.$el[0], { childList: true, subtree: true });\n  }\n\n  checkMutations = (mutation) => {\n    if (!this.navigationStarted || mutation.type !== 'childList') {\n      return;\n    }\n    const removedNodes = this.constructor.filterMutationNodes(mutation.removedNodes);\n    const addedNodes = this.constructor.filterMutationNodes(mutation.addedNodes, true);\n\n    if (removedNodes.length > 0) {\n      this.sayAboutContentLeave($(removedNodes));\n    }\n    if (addedNodes.length > 0) {\n      this.sayAboutContentEnter($(addedNodes));\n    }\n  };\n\n  static filterMutationNodes(nodes, checkParentElement = false) {\n    return Array.prototype.filter.call(nodes, node => (\n      node.nodeType === 1 &&\n        !node.isPreview &&\n        !['TITLE', 'META'].includes(node.tagName) &&\n        node.className !== 'turbolinks-progress-bar' &&\n        !(checkParentElement && !node.parentElement) &&\n        !(node.parentElement && node.parentElement.tagName === 'HEAD')\n    ));\n  }\n});\n","// require content mixin\nexport default Base => (class extends Base {\n  static pageEnterEventName = 'page:enter';\n  static pageLeaveEventName = 'page:leave';\n  static navigationStartedEventName = 'navigation:started';\n  static pageSelector = 'body';\n  navigationStarted = false;\n\n  constructor(options) {\n    super(options);\n    if (NORMAS_DEBUG) {\n      this.constructor.readOptions(this.logging, options.logging, {\n        navigation: true,\n        navigationGrouping: true,\n      });\n    }\n    this.bindPageEvents(options);\n    if (NORMAS_DEBUG) {\n      this.log('info', 'construct',\n        `üó∫ \"${this.instanceName}\" navigation mixin activated. logging.navigation =`, this.logging.navigation);\n    }\n  }\n\n  onStart(callback) {\n    this.$el.one(this.constructor.navigationStartedEventName, (event, $page) => callback($page));\n  }\n\n  bindPageEvents(options) {\n    if (NORMAS_DEBUG && (options.Turbolinks || global.Turbolinks)) {\n      this.log('warn',\n        'üó∫ You have Turbolinks, but not use integration.',\n        this.constructor.readmeLink('turbolinks-integration'));\n    }\n    $(this.pageEnter.bind(this));\n  }\n\n  listenToPage(enter, leave = null) {\n    if (enter) {\n      this.$el.on(this.constructor.pageEnterEventName, (event, $page) => enter($page));\n    }\n    if (leave) {\n      this.$el.on(this.constructor.pageLeaveEventName, (event, $page) => leave($page));\n    }\n  }\n\n  visit(location) {\n    window.location = location;\n  }\n\n  refreshPage() {\n    this.visit(window.location);\n  }\n\n  setHash(hash) {\n    location.hash = hash;\n  }\n\n  back() {\n    global.history.back();\n  }\n\n  replaceLocation(url) {\n    if (NORMAS_DEBUG) {\n      this.log('warn', 'üó∫ `replaceLocation` works only with Turbolinks.');\n    }\n  }\n\n  pushLocation(url, title = null, state = null) {\n    if (global.history) global.history.pushState(state, title, url);\n  }\n\n  sayAboutPageLoading(state) {\n    if (NORMAS_DEBUG) {\n      this.log('warn', 'üó∫ `sayAboutPageLoading` works only with Turbolinks.');\n    }\n  }\n\n  pageEnter() {\n    if (!this.navigationStarted) {\n      this.navigationStarted = true;\n      this.trigger(this.constructor.navigationStartedEventName, $page);\n      if (NORMAS_DEBUG && this.logging.constructGrouping) {\n        this.log('groupEnd', 'construct');\n      }\n    }\n    const $page = this.$page();\n    if (NORMAS_DEBUG) {\n      this.logPage('enter', $page);\n    }\n    this.trigger(this.constructor.pageEnterEventName, $page);\n    this.sayAboutContentEnter($page);\n  }\n\n  pageLeave() {\n    const $page = this.$page();\n    if (NORMAS_DEBUG) {\n      this.logPage('leave', $page);\n    }\n    this.sayAboutContentLeave($page);\n    this.trigger(this.constructor.pageLeaveEventName, $page);\n  }\n\n  $page() {\n    return this.$(this.constructor.pageSelector);\n  }\n\n  // private\n\n  logPage(logEvent, $page) {\n    if (!NORMAS_DEBUG || !this.debugMode || !this.logging.navigation) {\n      return;\n    }\n    const enter = logEvent === 'enter';\n    const [eventName, ...eventStyles] = this.constructor.logCycle(logEvent, enter, 10);\n    if (this.logging.navigationGrouping) {\n      this.logPageGroupEnd();\n    }\n    this.log(this.constructor.groupingMethod(this.logging.navigationGrouping), 'navigation',\n      `üó∫ page ${eventName}`,\n      ...eventStyles,\n      ...(enter ? [window.location.href] : []),\n      $page);\n    this.navigationGroup = true;\n    if (enter && this.logging.navigationGrouping) {\n      setTimeout(() => this.logPageGroupEnd(), 25);\n    }\n  }\n\n  logPageGroupEnd() {\n    if (NORMAS_DEBUG && this.navigationGroup) {\n      this.log('groupEnd', 'navigation');\n      this.navigationGroup = false;\n    }\n  }\n});\n","// require events mixin\n// require content mixin\nexport default Base => (class extends Base {\n  static preventContentEventsClassName = 'js-prevent-normas';\n  static elementEnterTimeoutIdDataName = 'elementEnterTimeoutId';\n\n  constructor(options) {\n    super(options);\n    if (NORMAS_DEBUG) {\n      this.constructor.readOptions(this.logging, options.logging, { elements: true });\n      this.log('info', 'construct',\n        `üíé \"${this.instanceName}\" elements mixin activated.`,\n        'logging.elements =', this.logging.elements);\n    }\n  }\n\n  listenToElement(selector, enter, leave = null, options = {}) {\n    options = Object.assign({ delay: 0, silent: false }, options);\n    this.listenToContent(\n      this.makeElementContentEnter(selector, enter, options),\n      this.makeElementContentLeave(selector, leave, options),\n    );\n  }\n\n  // private\n\n  makeElementContentEnter(selector, enter, { delay, silent }) {\n    return $content => {\n      let $elements = this.constructor.contentElements($content, selector);\n      if ($elements.length === 0) {\n        return;\n      }\n      if (delay > 0) {\n        this.dom.memoryData($elements, this.constructor.elementEnterTimeoutIdDataName, setTimeout(() => {\n          $content = $content.filter((index, element) => this.dom.contains(this.el, element));\n          if ($content.length === 0) {\n            return;\n          }\n          // check elements inclusion in $content after delay\n          $elements = this.constructor.contentElements($content, $elements);\n          if ($elements.length === 0) {\n            return;\n          }\n          // check elements with delay data\n          $elements = this.filterDelayedElements($elements, true);\n          if ($elements.length === 0) {\n            return;\n          }\n          this.handleElements($elements, selector, enter, 'enter', silent);\n        }, delay));\n      } else {\n        this.handleElements($elements, selector, enter, 'enter', silent);\n      }\n    };\n  }\n\n  makeElementContentLeave(selector, leave, { delay, silent }) {\n    if (!leave) {\n      return null;\n    }\n    return $content => {\n      let $elements = this.constructor.contentElements($content, selector);\n      if ($elements.length === 0) {\n        return;\n      }\n      if (delay > 0) {\n        $elements = this.filterDelayedElements($elements, false);\n        if ($elements.length === 0) {\n          return;\n        }\n      }\n      this.handleElements($elements, selector, leave, 'leave', silent);\n    };\n  }\n\n  filterDelayedElements($elements, delayState) {\n    return $elements.filter((index, element) => {\n      const delayed = this.dom.memoryData(element, this.constructor.elementEnterTimeoutIdDataName);\n      if (delayed) {\n        this.dom.removeMemoryData(element, this.constructor.elementEnterTimeoutIdDataName);\n      }\n      return !!delayed === delayState;\n    });\n  }\n\n  handleElements($elements, selector, handle, handleName, silent) {\n    let preventedElements = [];\n    const handledElements = this.helpers.filter($elements, element => {\n      if (!this.canCycleElement(element, selector, handleName)) {\n        return false;\n      }\n      const prevent = this.constructor.preventEventForElement(element);\n      if (prevent) {\n        preventedElements.push(element);\n        return false;\n      }\n      handle($(element));\n      return true;\n    });\n    if (NORMAS_DEBUG && !silent) {\n      this.logElements(handledElements, preventedElements, selector, handleName);\n    }\n  }\n\n  canCycleElement(element, selector, handleName) {\n    const normasElements = this.dom.memoryData(element, '_normasElements');\n    const selectorIndex = normasElements ? normasElements.indexOf(selector) : -1;\n    if (handleName === 'enter') {\n      if (selectorIndex !== -1) {\n        if (NORMAS_DEBUG) {\n          this.log('warn', 'elements',\n            ...this.constructor.logBold('üíé element \"%REPLACE%\" already entered.', selector),\n            element);\n        }\n        return false;\n      }\n      if (normasElements) {\n        normasElements.push(selector);\n      } else {\n        this.dom.memoryData(element, '_normasElements', [selector]);\n      }\n      return true;\n    }\n    // leave\n    if (selectorIndex !== -1) {\n      normasElements.splice(selectorIndex, 1);\n      return true;\n    }\n    if (NORMAS_DEBUG) {\n      this.log('warn', 'elements',\n        ...this.constructor.logBold('üíé element \"%REPLACE%\" try leave, but did not enter.', selector),\n        element);\n    }\n    return false;\n  }\n\n  logElements(handledElements, preventedElements, selector, handleName) {\n    if (!NORMAS_DEBUG) {\n      return;\n    }\n    const [elementName, ...elementStyles] = this.constructor.logBold(selector);\n    if (handledElements.length > 0) {\n      const [styledHandleName, ...handleStyles] = this.constructor.logCycle(handleName, handleName === 'enter', 3);\n      this._logElements(handledElements, '', styledHandleName, elementName, handleStyles, elementStyles);\n    }\n    if (preventedElements.length > 0) {\n      const [preventInfo, ...handleStyles] = this.constructor.logColor('prevent ', 'blue');\n      this._logElements(preventedElements, preventInfo, handleName, elementName, handleStyles, elementStyles);\n    }\n  }\n\n  _logElements(elements, preventInfo, handleName, elementName, handleStyles, elementStyles) {\n    if (!NORMAS_DEBUG) {\n      return;\n    }\n    const count = elements.length;\n    const plurElements = this.constructor.logPlur('element%S%', count);\n    const [styledCount, ...countStyles] = count > 1 ? this.constructor.logBold(count) : [];\n    const styles = [handleStyles];\n    styles[preventInfo ? 'push' : 'unshift'](countStyles);\n    this.log('elements',\n      `üíé ${preventInfo}${styledCount ? styledCount + ' ' : ''}${plurElements} ${handleName} \"${elementName}\"`,\n      ...this.helpers.flatten(styles), ...elementStyles,\n      elements);\n  }\n\n  static contentElements($content, selector) {\n    return $content.filter(selector).add($content.find(selector));\n  }\n\n  static preventEventForElement(element) {\n    return $(element).closest(`.${this.preventContentEventsClassName}`).length > 0;\n  }\n});\n","// require events mixin\nexport default Base => (class extends Base {\n  static contentEnterEventName = 'content:enter';\n  static contentLeaveEventName = 'content:leave';\n\n  constructor(options) {\n    super(options);\n    if (NORMAS_DEBUG) {\n      this.constructor.readOptions(this.logging, options.logging, {\n        content: false,\n        contentGrouping: true,\n      });\n      this.log('info', 'construct',\n        `üì∞ \"${this.instanceName}\" content mixin activated.`,\n        'logging.content =', this.logging.content);\n    }\n  }\n\n  // subscription to content lifecycle\n\n  listenToContent(enter, leave = null) {\n    if (enter) {\n      this.$el.on(this.constructor.contentEnterEventName, (event, $content) => enter($content, event));\n    }\n    if (leave) {\n      this.$el.on(this.constructor.contentLeaveEventName, (event, $content) => leave($content, event));\n    }\n  }\n\n  // manual content broadcasting\n\n  sayAboutContentEnter($content) {\n    return this.sayAboutContentMove('enter', this.constructor.contentEnterEventName, $content);\n  }\n\n  sayAboutContentLeave($content) {\n    return this.sayAboutContentMove('leave', this.constructor.contentLeaveEventName, $content);\n  }\n\n  // private\n  sayAboutContentMove(move, eventName, $content) {\n    const enter = move === 'enter';\n    $content = this.constructor.filterContent($content, (enter ? 'normasEntered' : 'normasLeft'), enter);\n    if ($content.length > 0) {\n      if (NORMAS_DEBUG) {\n        this.logContent(move, $content);\n      }\n      this.trigger(eventName, $content);\n      if (NORMAS_DEBUG && this.logging.contentGrouping) {\n        this.log('groupEnd', 'content');\n      }\n    }\n    return $content;\n  }\n\n  // helpers\n\n  replaceContentInner($container, content) {\n    this.sayAboutContentLeave($container);\n    $container.html(content);\n    this.sayAboutContentEnter($container);\n  }\n\n  replaceContent($content, $newContent) {\n    if ($content.length > 1) {\n      $content = $content.first();\n    }\n    this.sayAboutContentLeave($content);\n    $content.replaceWith($newContent);\n    this.sayAboutContentEnter($newContent);\n  }\n\n  // private\n\n  logContent(logEvent, $content) {\n    if (!NORMAS_DEBUG) {\n      return;\n    }\n    const [eventName, ...eventStyles] = this.constructor.logCycle(logEvent, logEvent === 'enter', 5);\n    const [contentName, ...contentStyles] = this.constructor.logBold(this.constructor.contentName($content));\n    this.log(this.constructor.groupingMethod(this.logging.contentGrouping), 'content',\n      `üì∞ content ${eventName} \"${contentName}\"`,\n      ...eventStyles, ...contentStyles,\n      $content);\n  }\n\n  static filterContent($content, elementFlagName, checkParentElement = false) {\n    return $content.filter((_index, element) => {\n      if (element[elementFlagName] || (checkParentElement && !element.parentElement)) {\n        return false;\n      }\n      element[elementFlagName] = true;\n      return true;\n    });\n  }\n});\n"],"names":["$","fn","each$","handle","this","each","index","element","filter$","filter","slideToggleByState","length","a","shift","slideDown","slideUp","slideToggle","focusToEnd","$this","first","is","focus","val","focusTo","caretPos","createTextRange","range","move","select","selectionStart","setSelectionRange","caretPosition","iCaretPos","oField","document","selection","oSel","createRange","moveStart","value","text","isPlainObject","proto","Object","getPrototypeOf","constructor","prototype","hasOwnProperty","call","isArray","Array","isFunction","v","collection","conditions","filterBase","find","iteratee","forEach","mapValues","object","keys","reduce","result","key","difference","arrayA","arrayB","includes","searchElement","indexOf","reduceBy","array","reducer","initial","grouped","item","groupKey","baseName","conditionsKeys","undefined","filterMatch","makeConditionsMatch","func","wait","timeoutId","args","setTimeout","push","group","flatten","deep","flat","b","deepMerge","destination","source","assign","map","values","elementsApply","dataParse","dataset","_this","dataValue","stringifiedValue","dataStringify","data","JSON","stringify","parse","e","lastDataParseError","isElement","Element","rootElement","body","contains","Base","el","instanceName","helpers","dom","$el","dest","defaults","NormasCore","options","eventName","trigger","listenEventsOnElement","$element","listeningArgs","listeningArguments","events","selector","on","forgetEventsOnElement","off","enter","eventRule","_this3","selectors","split","replace","join","trim","event","currentTarget","normasEvents","NormasBase","Normas","mutation","navigationStarted","type","removedNodes","filterMutationNodes","addedNodes","sayAboutContentLeave","sayAboutContentEnter","enablings","readOptions","mutations","MutationObserver","observeMutations","mutationObserver","_this2","checkMutations","observe","childList","subtree","nodes","checkParentElement","node","nodeType","isPreview","tagName","className","parentElement","normasMutations","bindPageEvents","callback","one","navigationStartedEventName","$page","pageEnter","bind","leave","pageEnterEventName","pageLeaveEventName","location","visit","window","hash","history","back","url","title","state","global","pushState","pageSelector","logEvent","normasNavigation","delay","silent","listenToContent","makeElementContentEnter","makeElementContentLeave","$elements","contentElements","$content","memoryData","elementEnterTimeoutIdDataName","filterDelayedElements","handleElements","delayState","delayed","_this4","removeMemoryData","handleName","preventedElements","_this5","canCycleElement","preventEventForElement","normasElements","selectorIndex","splice","handledElements","elements","preventInfo","elementName","handleStyles","elementStyles","add","closest","preventContentEventsClassName","contentEnterEventName","contentLeaveEventName","sayAboutContentMove","filterContent","$container","content","html","$newContent","replaceWith","elementFlagName","_index","normasContent"],"mappings":"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"}
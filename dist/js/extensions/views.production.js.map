{"version":3,"file":"views.production.js","sources":["../../../src/js/mixins/view.js","../../../src/js/mixins/views.js"],"sourcesContent":["export default Base => (class extends Base {\n  // Override it with your own initialization logic (like componentDidUnmount in react).\n  initialize(options) {\n  }\n\n  // Override it with your own unmount logic (like componentWillUnmount in react).\n  terminate() {\n  }\n\n  // protected\n\n  constructor(options) {\n    Object.assign(options, Base.dom.data(options.el));\n    super(options);\n    this.reflectOptions(options);\n    this.initializeEvents(options);\n    this.initialize(options);\n    if (NORMAS_DEBUG && this.logging.constructGrouping) {\n      this.log('groupEnd', 'construct');\n    }\n  }\n\n  destructor() {\n    if (NORMAS_DEBUG) {\n      const [destructText, ...destructStyles] = this.constructor.logColor('destructing', 'red');\n      this.log(this.constructor.groupingMethod(this.logging.constructGrouping), 'construct',\n        ...this.constructor.logBold(`${this.logging.constructPrefix} \"%REPLACE%\" ${destructText}`, this.instanceName),\n        ...destructStyles,\n        this);\n    }\n    this.terminate();\n    if (this.listenedEvents) {\n      this.forgetEvents(this.listenedEvents);\n      this.listenedEvents = null;\n    }\n    if (NORMAS_DEBUG && this.logging.constructGrouping) {\n      this.log('groupEnd', 'construct');\n    }\n  }\n\n  reflectOptions(options) {\n    if (!this.constructor.reflectOptions) {\n      return;\n    }\n    Object.keys(options).forEach(attr => {\n      if (this.constructor.reflectOptions.includes(attr)) {\n        this[attr] = options[attr];\n      }\n    });\n  }\n\n  initializeEvents(_options) {\n    const { events } = this.constructor;\n    if (events) {\n      if (!this.linkedEvents) {\n        this.linkedEvents = this.linkEvents(this.helpers.isFunction(events) ? events() : events);\n      }\n      this.listenedEvents = this.listenEvents(this.linkedEvents);\n    }\n  }\n\n  linkEvents(events) {\n    return this.helpers.mapValues(events, handle => this.helpers.isString(handle) ?\n      this[handle].bind(this)\n      :\n      (typeof this.helpers.isPlainObject(handle) ? this.linkEvents(handle) : handle)\n    );\n  }\n\n  data(key, ...value) {\n    this.dom.data(this.el, key, ...value);\n  }\n});\n","/**\n * Views system for Normas\n *\n * @see {@link https://github.com/evrone/normas#-views|Docs}\n * @see {@link https://github.com/evrone/normas/blob/master/src/js/mixins/views.js|Source}\n * @license MIT\n * @copyright Dmitry Karpunin <koderfunk@gmail.com>, 2017-2018\n */\n\n// TODO: may be rename Views, views, View, view\nimport normasView from './view';\n\nexport default Base => normasViews(Base, normasView(Base.NormasCore));\n\n// require content mixin\n// require events mixin\nconst normasViews = (Base, View) => (class extends Base {\n  static View = View;\n  View = View;\n  viewClasses = {};\n  viewInstances = [];\n\n  constructor(options) {\n    super(options);\n    this.viewOptions = {\n      debugMode: this.debugMode,\n      ...options.viewOptions,\n    };\n    if (NORMAS_DEBUG) {\n      this.viewOptions.logging = {\n        ...this.logging,\n        constructGrouping: 'groupCollapsed',\n        constructPrefix: '🏭', // private\n        eventsDebounced: false,\n        ...(options.viewOptions && options.viewOptions.logging),\n      };\n      this.log('info', 'construct', `🏭 \"${this.instanceName}\" views mixin activated.`);\n    }\n  }\n\n  registerView(viewClass, options = {}) {\n    if (this.viewClasses[viewClass.selector]) {\n      if (NORMAS_DEBUG) {\n        this.error(`🏭 View class for selector \\`${viewClass.selector}\\` already registered`,\n          this.viewClasses[viewClass.selector]);\n      }\n      return;\n    }\n    this.viewClasses[viewClass.selector] = viewClass;\n    this.listenToElement(\n      viewClass.selector,\n      $el => this.bindView($el, viewClass, options),\n      $el => this.unbindView($el, viewClass),\n      {\n        delay: viewClass.delay,\n        silent: true,\n      },\n    );\n  }\n\n  bindView($el, viewClass, options) {\n    if (!this.canBind($el, viewClass)) {\n      return null;\n    }\n    if (viewClass.instanceIndex) {\n      viewClass.instanceIndex += 1;\n    } else {\n      viewClass.instanceIndex = 1;\n    }\n    const view = new viewClass({\n      ...this.helpers.deepMerge(this.viewOptions, options),\n      instanceName: `${viewClass.selector}_${viewClass.instanceIndex}`,\n      el: $el[0],\n    });\n    this.viewInstances.push(view);\n    return view;\n  }\n\n  canBind($element, viewClass) {\n    const view = this.getViewsOnElement($element, viewClass)[0];\n    if (view) {\n      if (NORMAS_DEBUG) {\n        this.log('warn', '🏭 Element already has bound view', $element, viewClass, view);\n      }\n      return false;\n    }\n    return true;\n  }\n\n  unbindView($element, viewClass) {\n    const view = this.getViewsOnElement($element, viewClass)[0];\n    if (view) {\n      view.destructor();\n      this.viewInstances = this.helpers.without(this.viewInstances, view);\n    }\n  }\n\n  getViewsOnElement($element, viewClass = null) {\n    const el = $element instanceof $ ? $element[0] : $element;\n    const filterOptions = { el };\n    if (viewClass) {\n      filterOptions.constructor = viewClass;\n    }\n    return this.helpers.filter(this.viewInstances, filterOptions);\n  }\n\n  getViewsInContainer($container, checkRoot = true) {\n    return this.helpers.filter(this.viewInstances, view =>\n      view.$el.closest($container).length > 0 && (checkRoot || view.el !== $container[0])\n    );\n  }\n\n  getAllViews(viewClass) {\n    return this.helpers.filter(this.viewInstances, { constructor: viewClass });\n  }\n\n  getFirstView(viewClass) {\n    return this.helpers.find(this.viewInstances, { constructor: viewClass });\n  }\n\n  getFirstChildView(viewClass) {\n    return this.helpers.find(this.viewInstances, view => view instanceof viewClass);\n  }\n});\n"],"names":["options","assign","Base","dom","data","el","reflectOptions","initializeEvents","initialize","terminate","this","listenedEvents","forgetEvents","constructor","keys","forEach","_this2","includes","attr","_options","events","linkedEvents","linkEvents","helpers","isFunction","listenEvents","mapValues","_this3","isString","handle","bind","babelHelpers.typeof","isPlainObject","key","value","normasViews","View","viewOptions","_this","debugMode","viewClass","viewClasses","selector","listenToElement","bindView","$el","unbindView","delay","canBind","instanceIndex","view","deepMerge","viewInstances","push","$element","getViewsOnElement","destructor","without","filterOptions","$","filter","$container","checkRoot","closest","length","find","normasView","NormasCore"],"mappings":"iuCAWcA,oBACHC,OAAOD,EAASE,EAAKC,IAAIC,KAAKJ,EAAQK,oEACvCL,aACDM,eAAeN,KACfO,iBAAiBP,KACjBQ,WAAWR,gBAhBkBE,yCAEzBF,0FA4BJS,YACDC,KAAKC,sBACFC,aAAaF,KAAKC,qBAClBA,eAAiB,6CAOXX,cACRU,KAAKG,YAAYP,uBAGfQ,KAAKd,GAASe,QAAQ,YACvBC,EAAKH,YAAYP,eAAeW,SAASC,OACtCA,GAAQlB,EAAQkB,+CAKVC,OACPC,EAAWV,KAAKG,YAAhBO,OACJA,IACGV,KAAKW,oBACHA,aAAeX,KAAKY,WAAWZ,KAAKa,QAAQC,WAAWJ,GAAUA,IAAWA,SAE9ET,eAAiBD,KAAKe,aAAaf,KAAKW,kDAItCD,qBACFV,KAAKa,QAAQG,UAAUN,EAAQ,mBAAUO,EAAKJ,QAAQK,SAASC,GACpEF,EAAKE,GAAQC,QAEZC,EAAOJ,EAAKJ,QAAQS,cAAcH,IAAUF,EAAKL,WAAWO,GAAUA,iCAItEI,gCAAQC,2DACN/B,KAAIC,cAAKM,KAAKL,GAAI4B,UAAQC,cCtD7BC,EAAc,SAACjC,EAAMkC,6CAMbpC,4EACJA,2EALDoC,gKAMAC,yBACQC,EAAKC,WACbvC,EAAQqC,0BAVkCnC,2CAwBpCsC,cAAWxC,4DAClBU,KAAK+B,YAAYD,EAAUE,iBAO1BD,YAAYD,EAAUE,UAAYF,OAClCG,gBACHH,EAAUE,SACV,mBAAO1B,EAAK4B,SAASC,EAAKL,EAAWxC,IACrC,mBAAOgB,EAAK8B,WAAWD,EAAKL,WAEnBA,EAAUO,cACT,sCAKLF,EAAKL,EAAWxC,OAClBU,KAAKsC,QAAQH,EAAKL,UACd,KAELA,EAAUS,gBACFA,eAAiB,IAEjBA,cAAgB,MAEtBC,EAAO,IAAIV,OACZ9B,KAAKa,QAAQ4B,UAAUzC,KAAK2B,YAAarC,iBAC3BwC,EAAUE,aAAYF,EAAUS,iBAC7CJ,EAAI,kBAELO,cAAcC,KAAKH,GACjBA,kCAGDI,EAAUd,OACVU,EAAOxC,KAAK6C,kBAAkBD,EAAUd,GAAW,UACrDU,qCASKI,EAAUd,OACbU,EAAOxC,KAAK6C,kBAAkBD,EAAUd,GAAW,GACrDU,MACGM,kBACAJ,cAAgB1C,KAAKa,QAAQkC,QAAQ/C,KAAK0C,cAAeF,8CAIhDI,OAAUd,yDAAY,KAEhCkB,GAAkBrD,GADbiD,aAAoBK,EAAIL,EAAS,GAAKA,UAE7Cd,MACY3B,YAAc2B,GAEvB9B,KAAKa,QAAQqC,OAAOlD,KAAK0C,cAAeM,+CAG7BG,OAAYC,oEACvBpD,KAAKa,QAAQqC,OAAOlD,KAAK0C,cAAe,mBAC7CF,EAAKL,IAAIkB,QAAQF,GAAYG,OAAS,IAAMF,GAAaZ,EAAK7C,KAAOwD,EAAW,0CAIxErB,UACH9B,KAAKa,QAAQqC,OAAOlD,KAAK0C,eAAiBvC,YAAa2B,yCAGnDA,UACJ9B,KAAKa,QAAQ0C,KAAKvD,KAAK0C,eAAiBvC,YAAa2B,8CAG5CA,UACT9B,KAAKa,QAAQ0C,KAAKvD,KAAK0C,cAAe,mBAAQF,aAAgBV,6EAxGzDJ,yCALOD,EAAYjC,EAAMgE,EAAWhE,EAAKiE"}
{"version":3,"file":"normasMutations.js","sources":["../../src/js/mixins/mutations.js"],"sourcesContent":["// EXPERIMENTAL\n\nlet initialMutations = true;\n\nexport default Base => (class extends Base {\n  constructor(options) {\n    super(options);\n    if (MutationObserver) {\n      this.observeMutations();\n      this.log('warn', `\"${this.instanceName}\" mutation observer activated. (EXPERIMENTAL feature)`);\n    } else {\n      this.log('warn', `\"${this.instanceName}\" mutation observer NOT DEFINED!`);\n    }\n  }\n\n  observeMutations() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n    this.mutationObserver = new MutationObserver(mutations => mutations.forEach(this.checkMutations));\n    this.mutationObserver.observe(this.$el[0], { childList: true, subtree: true });\n  }\n\n  checkMutations = (mutation) => {\n    if (mutation.type !== 'childList') {\n      return;\n    }\n\n    const removedNodes = this.constructor.filterMutationNodes(mutation.removedNodes);\n    const addedNodes = this.constructor.filterMutationNodes(mutation.addedNodes);\n\n    if (removedNodes.length > 0) {\n      this.sayAboutContentLeave($(removedNodes));\n    }\n    if (addedNodes.length > 0) {\n      this.sayAboutContentEnter($(addedNodes));\n    }\n  };\n\n  pageEnter() {\n    if (initialMutations) {\n      initialMutations = false;\n    }\n    super.pageEnter();\n  }\n\n  static filterMutationNodes(nodes) {\n    return Array.prototype.filter.call(nodes, node => {\n      if (initialMutations) {\n        node.normasInitialMutationReady = true;\n        if (node.parentElement && node.parentElement.normasInitialMutationReady) {\n          return false;\n        }\n      }\n      return node.nodeType === 1 &&\n        !node.isPreview &&\n        node.tagName !== 'TITLE' && node.tagName !== 'META' &&\n        (!node.parentElement || node.parentElement.tagName !== 'HEAD');\n    });\n  }\n});\n"],"names":["initialMutations","options","mutation","type","removedNodes","constructor","filterMutationNodes","addedNodes","length","sayAboutContentLeave","$","sayAboutContentEnter","MutationObserver","observeMutations","log","instanceName","mutationObserver","mutations","forEach","checkMutations","observe","$el","childList","subtree","nodes","Array","prototype","filter","call","normasInitialMutationReady","node","parentElement","nodeType","isPreview","tagName","Base"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,IAAIA,mBAAmB,IAAvB;;AAEA,iBAAe;;;;qBACDC,OAAZ,EAAqB;;;mHACbA,OADa;;;;;eAgBJ,eAACC,QAAD,EAAc;cACzBA,SAASC,IAAT,KAAkB,WAAtB,EAAmC;;;;cAI7BC,eAAe,MAAKC,WAAL,CAAiBC,mBAAjB,CAAqCJ,SAASE,YAA9C,CAArB;cACMG,aAAa,MAAKF,WAAL,CAAiBC,mBAAjB,CAAqCJ,SAASK,UAA9C,CAAnB;;cAEIH,aAAaI,MAAb,GAAsB,CAA1B,EAA6B;kBACtBC,oBAAL,CAA0BC,EAAEN,YAAF,CAA1B;;cAEEG,WAAWC,MAAX,GAAoB,CAAxB,EAA2B;kBACpBG,oBAAL,CAA0BD,EAAEH,UAAF,CAA1B;;;;;UA1BEK,gBAAJ,EAAsB;cACfC,gBAAL;cACKC,GAAL,CAAS,MAAT,QAAqB,MAAKC,YAA1B;OAFF,MAGO;cACAD,GAAL,CAAS,MAAT,QAAqB,MAAKC,YAA1B;;;;;;;yCAIe;;;;aAEZC,gBAAL,GAAwB,IAAIJ,gBAAJ,CAAqB;iBAAaK,UAAUC,OAAV,CAAkB,OAAKC,cAAvB,CAAb;SAArB,CAAxB;aACKH,gBAAL,CAAsBI,OAAtB,CAA8B,KAAKC,GAAL,CAAS,CAAT,CAA9B,EAA2C,EAAEC,WAAW,IAAb,EAAmBC,SAAS,IAA5B,EAA3C;;;;kCAmBU;YACNvB,gBAAJ,EAAsB;6BACD,KAAnB;;;;;;0CAKuBwB,KAxCd,EAwCqB;eACzBC,MAAMC,SAAN,CAAgBC,MAAhB,CAAuBC,IAAvB,CAA4BJ,KAA5B,EAAmC,gBAAQ;cAC5CxB,gBAAJ,EAAsB;iBACf6B,0BAAL,GAAkC,IAAlC;gBACIC,KAAKC,aAAL,IAAsBD,KAAKC,aAAL,CAAmBF,0BAA7C,EAAyE;qBAChE,KAAP;;;iBAGGC,KAAKE,QAAL,KAAkB,CAAlB,IACL,CAACF,KAAKG,SADD,IAELH,KAAKI,OAAL,KAAiB,OAFZ,IAEuBJ,KAAKI,OAAL,KAAiB,MAFxC,KAGJ,CAACJ,KAAKC,aAAN,IAAuBD,KAAKC,aAAL,CAAmBG,OAAnB,KAA+B,MAHlD,CAAP;SAPK,CAAP;;;;IAzCkCC,IAAvB;CAAf;;;;"}
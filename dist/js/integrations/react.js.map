{"version":3,"file":"react.js","sources":["../../../src/js/lib/helpers.js","../../../src/js/extensions/react.js"],"sourcesContent":["// Sufficient for Normas implementation of functions like from lodash\n\nexport isPlainObject from 'is-plain-object';\n\nexport const isArray = Array.isArray;\n\nexport function isFunction(v) {\n  return typeof v === 'function';\n}\n\nexport function isString(v) {\n  return typeof v === 'string';\n}\n\nexport function compact(array) {\n  return filter(array, v => v);\n}\n\nexport function debounce(func, wait) {\n  let timeoutId;\n  return (...args) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, wait);\n  }\n}\n\nexport function groupBy(array, key) {\n  return array.reduce((grouped, item) => {\n    const groupKey = isFunction(key) ? key(item) : item[key];\n    (grouped[groupKey] || (grouped[groupKey] = [])).push(item);\n    return grouped;\n  }, {});\n}\n\nexport function groupByInArray(array, key) {\n  return array.reduce((grouped, item) => {\n    const groupKey = isFunction(key) ? key(item) : item[key];\n    const group = find(grouped, ([k]) => k === groupKey);\n    if (group) {\n      group[1].push(item);\n    } else {\n      grouped.push([groupKey, [item]]);\n    }\n    return grouped;\n  }, []);\n}\n\nexport function flatten(array) {\n  const result = [];\n  array.forEach(value => {\n    if (isArray(value)) {\n      result.push(...value);\n    } else {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nexport function deepMerge(destination, source) {\n  const result = Object.assign({}, destination);\n  Object.keys(source).forEach(key => {\n    if (source[key]) {\n      if (isPlainObject(destination[key]) && isPlainObject(source[key])) {\n        result[key] = deepMerge(destination[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    }\n  });\n  return result;\n}\n\nexport function filter(collection, conditions) {\n  return filterBase('filter', collection, conditions);\n}\n\nexport function find(collection, conditions) {\n  return filterBase('find', collection, conditions);\n}\n\nexport function map(collection, iteratee) {\n  return Array.prototype.map.call(collection, iteratee);\n}\n\nexport function mapValues(object, iteratee) {\n  const result = {};\n  Object.keys(object).forEach(key => {\n    result[key] = iteratee(object[key]);\n  });\n  return result;\n}\n\nexport function without(collection, ...values) {\n  return filter(collection, item => !values.includes(item));\n}\n\n// private\n\nfunction filterBase(baseName, collection, conditions) {\n  return Array.prototype[baseName].call(collection, makeConditionsMatch(conditions));\n}\n\nfunction makeConditionsMatch(conditions) {\n  if (isFunction(conditions)) {\n    return conditions;\n  } else {\n    const conditionsKeys = Object.keys(conditions);\n    return item => filterMatch(item, conditions, conditionsKeys);\n  }\n}\n\nfunction filterMatch(item, conditions, conditionsKeys) {\n  return conditionsKeys.find(key => conditions[key] !== item[key]) === undefined;\n}\n","/*!\n * React integration for Normas <https://github.com/evrone/normas/blob/master/src/js/extensions/react.js>\n *\n * @license MIT\n * @copyright Dmitry Karpunin <koderfunk@gmail.com>, 2017-2018\n */\n\nimport { deepMerge } from '../lib/helpers';\n\nconst defaults = {\n  selector: '[data-react-component]',\n  listenOptions: {},\n};\n\nexport default function({ normas, React, ReactDOM }, components, options = {}) {\n  const { selector, listenOptions } = deepMerge(defaults, options);\n\n  normas.listenToElement(\n    selector,\n    mountComponentToElement,\n    unmountComponentFromElement,\n    listenOptions,\n  );\n\n  function mountComponentToElement($element) {\n    const domNode = $element[0];\n    const name = domNode.getAttribute('data-react-component');\n    const props = JSON.parse(domNode.getAttribute('data-props'));\n    const componentClass = components[name];\n    const component = React.createElement(componentClass, props);\n    ReactDOM.render(component, domNode);\n  }\n\n  function unmountComponentFromElement($element) {\n    const domNode = $element[0];\n    ReactDOM.unmountComponentAtNode(domNode);\n  }\n};\n"],"names":["deepMerge","destination","source","result","Object","assign","keys","forEach","key","isPlainObject","defaults","components","normas","React","ReactDOM","options","selector","listenOptions","listenToElement","mountComponentToElement","unmountComponentFromElement","$element","domNode","name","getAttribute","props","JSON","parse","componentClass","component","createElement","render","unmountComponentAtNode"],"mappings":";;AA+DO,SAASA,SAAT,CAAmBC,WAAnB,EAAgCC,MAAhC,EAAwC;MACvCC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,WAAlB,CAAf;SACOK,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA4B,eAAO;QAC7BL,OAAOM,GAAP,CAAJ,EAAiB;UACXC,cAAcR,YAAYO,GAAZ,CAAd,KAAmCC,cAAcP,OAAOM,GAAP,CAAd,CAAvC,EAAmE;eAC1DA,GAAP,IAAcR,UAAUC,YAAYO,GAAZ,CAAV,EAA4BN,OAAOM,GAAP,CAA5B,CAAd;OADF,MAEO;eACEA,GAAP,IAAcN,OAAOM,GAAP,CAAd;;;GALN;SASOL,MAAP;;;AC1EF;;;;;;;AAOA,AAEA,IAAMO,aAAW;YACL,wBADK;iBAEA;CAFjB;;AAKA,AAAe,sBAAsCC,UAAtC,EAAgE;MAArDC,MAAqD,QAArDA,MAAqD;MAA7CC,KAA6C,QAA7CA,KAA6C;MAAtCC,QAAsC,QAAtCA,QAAsC;MAAdC,OAAc,uEAAJ,EAAI;;mBACzCf,UAAUU,UAAV,EAAoBK,OAApB,CADyC;MACrEC,QADqE,cACrEA,QADqE;MAC3DC,aAD2D,cAC3DA,aAD2D;;SAGtEC,eAAP,CACEF,QADF,EAEEG,uBAFF,EAGEC,2BAHF,EAIEH,aAJF;;WAOSE,uBAAT,CAAiCE,QAAjC,EAA2C;QACnCC,UAAUD,SAAS,CAAT,CAAhB;QACME,OAAOD,QAAQE,YAAR,CAAqB,sBAArB,CAAb;QACMC,QAAQC,KAAKC,KAAL,CAAWL,QAAQE,YAAR,CAAqB,YAArB,CAAX,CAAd;QACMI,iBAAiBjB,WAAWY,IAAX,CAAvB;QACMM,YAAYhB,MAAMiB,aAAN,CAAoBF,cAApB,EAAoCH,KAApC,CAAlB;aACSM,MAAT,CAAgBF,SAAhB,EAA2BP,OAA3B;;;WAGOF,2BAAT,CAAqCC,QAArC,EAA+C;QACvCC,UAAUD,SAAS,CAAT,CAAhB;aACSW,sBAAT,CAAgCV,OAAhC;;;;;;"}